<?php

/**
 * @file
 * Contains entity_layout.module..
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 * @param $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function entity_layout_help($route_name, RouteMatchInterface $route_match) {
  if ('help.page.entity_layout' === $route_name) {
    // Main module help for the entity_layout module.
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Provide ability to contributors to set a custom entity layout on a per instance basis, using field items') . '</p>';

    return $output;
  }

  return null;
}

/**
 * Implements hook_module_implements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function entity_layout_module_implements_alter(&$implementations, $hook) {
  if ('entity_view_alter' === $hook) {
    unset($implementations['entity_layout']);
    $implementations['entity_layout'] = false;
  }
}

/**
 * Implements hook_entity_view().
 *
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 * @param $view_mode
 */
/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 */
function entity_layout_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Iterate over all displayable components to find an entity layout formatter.
  foreach($display->getComponents() as $name => $component) {
    if (
      false === array_key_exists('type', $component)
      || 'entity_layout_field_formatter' !== $component['type']
    ) {
      continue;
    }
    // Store the name of the component that contain entity_layout data
    $build['#entity_layout'] = $name;
    // Register a pre_render callback to perform actual layout transformation
    // at the very last step of the render process
    $build['#pre_render'][] = 'entity_layout_pre_render';
  }
}

function entity_layout_pre_render($build) {
  ksm($build);
  dump($build);
  die;
  return $build;
}
